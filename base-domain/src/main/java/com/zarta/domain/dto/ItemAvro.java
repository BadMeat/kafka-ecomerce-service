/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zarta.domain.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ItemAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6460368193379527824L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ItemAvro\",\"namespace\":\"com.zarta.domain.dto\",\"fields\":[{\"name\":\"kode\",\"type\":\"string\"},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ItemAvro> ENCODER =
      new BinaryMessageEncoder<ItemAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ItemAvro> DECODER =
      new BinaryMessageDecoder<ItemAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ItemAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ItemAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ItemAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ItemAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ItemAvro from a ByteBuffer. */
  public static ItemAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence kode;
  @Deprecated public int qty;
  @Deprecated public int price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ItemAvro() {}

  /**
   * All-args constructor.
   * @param kode The new value for kode
   * @param qty The new value for qty
   * @param price The new value for price
   */
  public ItemAvro(java.lang.CharSequence kode, java.lang.Integer qty, java.lang.Integer price) {
    this.kode = kode;
    this.qty = qty;
    this.price = price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return kode;
    case 1: return qty;
    case 2: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: kode = (java.lang.CharSequence)value$; break;
    case 1: qty = (java.lang.Integer)value$; break;
    case 2: price = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'kode' field.
   * @return The value of the 'kode' field.
   */
  public java.lang.CharSequence getKode() {
    return kode;
  }

  /**
   * Sets the value of the 'kode' field.
   * @param value the value to set.
   */
  public void setKode(java.lang.CharSequence value) {
    this.kode = value;
  }

  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public java.lang.Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(java.lang.Integer value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Integer getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Integer value) {
    this.price = value;
  }

  /**
   * Creates a new ItemAvro RecordBuilder.
   * @return A new ItemAvro RecordBuilder
   */
  public static com.zarta.domain.dto.ItemAvro.Builder newBuilder() {
    return new com.zarta.domain.dto.ItemAvro.Builder();
  }

  /**
   * Creates a new ItemAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ItemAvro RecordBuilder
   */
  public static com.zarta.domain.dto.ItemAvro.Builder newBuilder(com.zarta.domain.dto.ItemAvro.Builder other) {
    return new com.zarta.domain.dto.ItemAvro.Builder(other);
  }

  /**
   * Creates a new ItemAvro RecordBuilder by copying an existing ItemAvro instance.
   * @param other The existing instance to copy.
   * @return A new ItemAvro RecordBuilder
   */
  public static com.zarta.domain.dto.ItemAvro.Builder newBuilder(com.zarta.domain.dto.ItemAvro other) {
    return new com.zarta.domain.dto.ItemAvro.Builder(other);
  }

  /**
   * RecordBuilder for ItemAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ItemAvro>
    implements org.apache.avro.data.RecordBuilder<ItemAvro> {

    private java.lang.CharSequence kode;
    private int qty;
    private int price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zarta.domain.dto.ItemAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.kode)) {
        this.kode = data().deepCopy(fields()[0].schema(), other.kode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ItemAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zarta.domain.dto.ItemAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.kode)) {
        this.kode = data().deepCopy(fields()[0].schema(), other.kode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'kode' field.
      * @return The value.
      */
    public java.lang.CharSequence getKode() {
      return kode;
    }

    /**
      * Sets the value of the 'kode' field.
      * @param value The value of 'kode'.
      * @return This builder.
      */
    public com.zarta.domain.dto.ItemAvro.Builder setKode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.kode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'kode' field has been set.
      * @return True if the 'kode' field has been set, false otherwise.
      */
    public boolean hasKode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'kode' field.
      * @return This builder.
      */
    public com.zarta.domain.dto.ItemAvro.Builder clearKode() {
      kode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public java.lang.Integer getQty() {
      return qty;
    }

    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public com.zarta.domain.dto.ItemAvro.Builder setQty(int value) {
      validate(fields()[1], value);
      this.qty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public com.zarta.domain.dto.ItemAvro.Builder clearQty() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Integer getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.zarta.domain.dto.ItemAvro.Builder setPrice(int value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.zarta.domain.dto.ItemAvro.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ItemAvro build() {
      try {
        ItemAvro record = new ItemAvro();
        record.kode = fieldSetFlags()[0] ? this.kode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.qty = fieldSetFlags()[1] ? this.qty : (java.lang.Integer) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ItemAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ItemAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ItemAvro>
    READER$ = (org.apache.avro.io.DatumReader<ItemAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
