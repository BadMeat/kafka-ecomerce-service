/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zarta.domain.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DlqMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7175837069402927627L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DlqMessage\",\"namespace\":\"com.zarta.domain.dto\",\"fields\":[{\"name\":\"originalTopic\",\"type\":\"string\",\"doc\":\"Nama topik asal pesan gagal\"},{\"name\":\"originalKey\",\"type\":[\"null\",\"string\"],\"doc\":\"Key dari pesan asli (boleh null)\",\"default\":null},{\"name\":\"error\",\"type\":\"string\",\"doc\":\"Pesan error atau exception\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Waktu kegagalan dalam epoch millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DlqMessage> ENCODER =
      new BinaryMessageEncoder<DlqMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DlqMessage> DECODER =
      new BinaryMessageDecoder<DlqMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DlqMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DlqMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DlqMessage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DlqMessage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DlqMessage from a ByteBuffer. */
  public static DlqMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Nama topik asal pesan gagal */
  @Deprecated public java.lang.CharSequence originalTopic;
  /** Key dari pesan asli (boleh null) */
  @Deprecated public java.lang.CharSequence originalKey;
  /** Pesan error atau exception */
  @Deprecated public java.lang.CharSequence error;
  /** Waktu kegagalan dalam epoch millis */
  @Deprecated public long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DlqMessage() {}

  /**
   * All-args constructor.
   * @param originalTopic Nama topik asal pesan gagal
   * @param originalKey Key dari pesan asli (boleh null)
   * @param error Pesan error atau exception
   * @param timestamp Waktu kegagalan dalam epoch millis
   */
  public DlqMessage(java.lang.CharSequence originalTopic, java.lang.CharSequence originalKey, java.lang.CharSequence error, java.lang.Long timestamp) {
    this.originalTopic = originalTopic;
    this.originalKey = originalKey;
    this.error = error;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return originalTopic;
    case 1: return originalKey;
    case 2: return error;
    case 3: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: originalTopic = (java.lang.CharSequence)value$; break;
    case 1: originalKey = (java.lang.CharSequence)value$; break;
    case 2: error = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'originalTopic' field.
   * @return Nama topik asal pesan gagal
   */
  public java.lang.CharSequence getOriginalTopic() {
    return originalTopic;
  }

  /**
   * Sets the value of the 'originalTopic' field.
   * Nama topik asal pesan gagal
   * @param value the value to set.
   */
  public void setOriginalTopic(java.lang.CharSequence value) {
    this.originalTopic = value;
  }

  /**
   * Gets the value of the 'originalKey' field.
   * @return Key dari pesan asli (boleh null)
   */
  public java.lang.CharSequence getOriginalKey() {
    return originalKey;
  }

  /**
   * Sets the value of the 'originalKey' field.
   * Key dari pesan asli (boleh null)
   * @param value the value to set.
   */
  public void setOriginalKey(java.lang.CharSequence value) {
    this.originalKey = value;
  }

  /**
   * Gets the value of the 'error' field.
   * @return Pesan error atau exception
   */
  public java.lang.CharSequence getError() {
    return error;
  }

  /**
   * Sets the value of the 'error' field.
   * Pesan error atau exception
   * @param value the value to set.
   */
  public void setError(java.lang.CharSequence value) {
    this.error = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Waktu kegagalan dalam epoch millis
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Waktu kegagalan dalam epoch millis
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new DlqMessage RecordBuilder.
   * @return A new DlqMessage RecordBuilder
   */
  public static com.zarta.domain.dto.DlqMessage.Builder newBuilder() {
    return new com.zarta.domain.dto.DlqMessage.Builder();
  }

  /**
   * Creates a new DlqMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DlqMessage RecordBuilder
   */
  public static com.zarta.domain.dto.DlqMessage.Builder newBuilder(com.zarta.domain.dto.DlqMessage.Builder other) {
    return new com.zarta.domain.dto.DlqMessage.Builder(other);
  }

  /**
   * Creates a new DlqMessage RecordBuilder by copying an existing DlqMessage instance.
   * @param other The existing instance to copy.
   * @return A new DlqMessage RecordBuilder
   */
  public static com.zarta.domain.dto.DlqMessage.Builder newBuilder(com.zarta.domain.dto.DlqMessage other) {
    return new com.zarta.domain.dto.DlqMessage.Builder(other);
  }

  /**
   * RecordBuilder for DlqMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DlqMessage>
    implements org.apache.avro.data.RecordBuilder<DlqMessage> {

    /** Nama topik asal pesan gagal */
    private java.lang.CharSequence originalTopic;
    /** Key dari pesan asli (boleh null) */
    private java.lang.CharSequence originalKey;
    /** Pesan error atau exception */
    private java.lang.CharSequence error;
    /** Waktu kegagalan dalam epoch millis */
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zarta.domain.dto.DlqMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.originalTopic)) {
        this.originalTopic = data().deepCopy(fields()[0].schema(), other.originalTopic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.originalKey)) {
        this.originalKey = data().deepCopy(fields()[1].schema(), other.originalKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.error)) {
        this.error = data().deepCopy(fields()[2].schema(), other.error);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DlqMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zarta.domain.dto.DlqMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.originalTopic)) {
        this.originalTopic = data().deepCopy(fields()[0].schema(), other.originalTopic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.originalKey)) {
        this.originalKey = data().deepCopy(fields()[1].schema(), other.originalKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.error)) {
        this.error = data().deepCopy(fields()[2].schema(), other.error);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'originalTopic' field.
      * Nama topik asal pesan gagal
      * @return The value.
      */
    public java.lang.CharSequence getOriginalTopic() {
      return originalTopic;
    }

    /**
      * Sets the value of the 'originalTopic' field.
      * Nama topik asal pesan gagal
      * @param value The value of 'originalTopic'.
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder setOriginalTopic(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.originalTopic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'originalTopic' field has been set.
      * Nama topik asal pesan gagal
      * @return True if the 'originalTopic' field has been set, false otherwise.
      */
    public boolean hasOriginalTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'originalTopic' field.
      * Nama topik asal pesan gagal
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder clearOriginalTopic() {
      originalTopic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'originalKey' field.
      * Key dari pesan asli (boleh null)
      * @return The value.
      */
    public java.lang.CharSequence getOriginalKey() {
      return originalKey;
    }

    /**
      * Sets the value of the 'originalKey' field.
      * Key dari pesan asli (boleh null)
      * @param value The value of 'originalKey'.
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder setOriginalKey(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.originalKey = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'originalKey' field has been set.
      * Key dari pesan asli (boleh null)
      * @return True if the 'originalKey' field has been set, false otherwise.
      */
    public boolean hasOriginalKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'originalKey' field.
      * Key dari pesan asli (boleh null)
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder clearOriginalKey() {
      originalKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'error' field.
      * Pesan error atau exception
      * @return The value.
      */
    public java.lang.CharSequence getError() {
      return error;
    }

    /**
      * Sets the value of the 'error' field.
      * Pesan error atau exception
      * @param value The value of 'error'.
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder setError(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.error = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'error' field has been set.
      * Pesan error atau exception
      * @return True if the 'error' field has been set, false otherwise.
      */
    public boolean hasError() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'error' field.
      * Pesan error atau exception
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder clearError() {
      error = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Waktu kegagalan dalam epoch millis
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Waktu kegagalan dalam epoch millis
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Waktu kegagalan dalam epoch millis
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Waktu kegagalan dalam epoch millis
      * @return This builder.
      */
    public com.zarta.domain.dto.DlqMessage.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DlqMessage build() {
      try {
        DlqMessage record = new DlqMessage();
        record.originalTopic = fieldSetFlags()[0] ? this.originalTopic : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.originalKey = fieldSetFlags()[1] ? this.originalKey : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.error = fieldSetFlags()[2] ? this.error : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DlqMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<DlqMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DlqMessage>
    READER$ = (org.apache.avro.io.DatumReader<DlqMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
